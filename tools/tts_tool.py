# from sqlite3 import _Parameters
from google.adk.tools import FunctionTool
import os
from dotenv import load_dotenv
from google.genai.types import Schema
from generator.tts2 import TTSPipeline
from typing import List

load_dotenv()

def log_line(line):
    log_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "run_pipeline.log")
    with open(log_file, "a") as f:
        f.write(line + "\n")

class TTSTool(FunctionTool):
    """
    ADK Tool for running TTS on a script and returning audio path and timeline.
    """
    def __init__(self):
        async def tts_tool(script: List[List[str]]) -> dict:
            """
            Converts a script (list of [speaker, line] lists) to audio using TTS and returns a dictionary called tts_output having keys "audio_path" and "timestamps".

            The value of key "audio_path" is the path to the final audio file generated by TTS. It is a string.

            The value of key "timestamps" is a list of dictionaries. Each of these dictionaries has the keys "speaker, "start", "duration" and "filename". The values of these keys are 
            the name of the speaker, the start time of the audio, the duration of the audio and the name of the audio file respectively. 
            
            For example, if the script is:
            [["Donald Trump", "line1"], ["Elon Musk", "line2"]]

            then tts_output will be:
            {
                "audio_path": "path/to/final_audio.mp3",
                "timestamps": [
                    {"speaker": "Donald Trump", "start": 0, "duration": 10, "filename": "donald_trump_1.mp3"},
                    {"speaker": "Elon Musk", "start": 10, "duration": 10, "filename": "elon_musk_2.mp3"}
                ]
            }
 
            
            Args:
                script (List[List[str]]): List of [speaker, line] lists.

            Returns:
                tts_output dict: {"audio_path": str, "timestamps": List(dict)}
            """
            tts = TTSPipeline()
            log_line("STATUS: Starting AUDIO generation...")
            final_audio, timeline = await tts.run(script)

            tts_output = {"audio_path": final_audio, "timestamps": timeline}

            log_line(f"tts_output RECEIVED BY TTS TOOL: {tts_output}")
            return tts_output



        super().__init__(func=tts_tool)
